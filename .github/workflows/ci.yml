name: Test iNNvestigate

on: 
  - push
  - pull_request

jobs:
  linting:
    # Run linting outside of matrix
    runs-on: ubuntu-latest
    steps:
      # Check-out repo and set-up python  
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      # Load pip cache if it exists
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip
      # Install and run linters
      - run: python -m pip install black isort
      - name: Format check with Black
        run: black --check .
      - name: Format check with isort
        run: isort --check .
  test:
    needs: linting
    strategy:
      fail-fast: true
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
        python-version: [ "3.7", ]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      # Check-out repo and set-up python     
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # Install & configure poetry      
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.6
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      # Load cached venv if cache exists      
      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v2
        with:
          path: ~/.cache
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      # Install dependencies
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      # Install your root project, if required 
      - name: Install library
        run: poetry install --no-interaction
      # Run fast tests on matrix, full tests for coverage
      - name: Run tests
        run: |
          source $VENV
          pytest ./tests -m fast 
